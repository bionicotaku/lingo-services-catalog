// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: projection.sql

package catalogsql

import (
	"context"

	po "github.com/bionicotaku/lingo-services-catalog/internal/models/po"
	uuid "github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const deleteVideoProjection = `-- name: DeleteVideoProjection :exec
DELETE FROM catalog.video_projection
WHERE video_id = $1
  AND version <= $2
`

type DeleteVideoProjectionParams struct {
	VideoID uuid.UUID `json:"video_id"`
	Version int64     `json:"version"`
}

func (q *Queries) DeleteVideoProjection(ctx context.Context, arg DeleteVideoProjectionParams) error {
	_, err := q.db.Exec(ctx, deleteVideoProjection, arg.VideoID, arg.Version)
	return err
}

const getVideoProjection = `-- name: GetVideoProjection :one
SELECT
    video_id,
    title,
    status,
    media_status,
    analysis_status,
    created_at,
    updated_at,
    version,
    occurred_at
FROM catalog.video_projection
WHERE video_id = $1
`

func (q *Queries) GetVideoProjection(ctx context.Context, videoID uuid.UUID) (CatalogVideoProjection, error) {
	row := q.db.QueryRow(ctx, getVideoProjection, videoID)
	var i CatalogVideoProjection
	err := row.Scan(
		&i.VideoID,
		&i.Title,
		&i.Status,
		&i.MediaStatus,
		&i.AnalysisStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Version,
		&i.OccurredAt,
	)
	return i, err
}

const upsertVideoProjection = `-- name: UpsertVideoProjection :exec

INSERT INTO catalog.video_projection (
    video_id,
    title,
    status,
    media_status,
    analysis_status,
    created_at,
    updated_at,
    version,
    occurred_at
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9
)
ON CONFLICT (video_id) DO UPDATE
SET title = EXCLUDED.title,
    status = EXCLUDED.status,
    media_status = EXCLUDED.media_status,
    analysis_status = EXCLUDED.analysis_status,
    updated_at = EXCLUDED.updated_at,
    version = EXCLUDED.version,
    occurred_at = EXCLUDED.occurred_at
WHERE catalog.video_projection.version < EXCLUDED.version
`

type UpsertVideoProjectionParams struct {
	VideoID        uuid.UUID          `json:"video_id"`
	Title          string             `json:"title"`
	Status         po.VideoStatus     `json:"status"`
	MediaStatus    po.StageStatus     `json:"media_status"`
	AnalysisStatus po.StageStatus     `json:"analysis_status"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
	Version        int64              `json:"version"`
	OccurredAt     pgtype.Timestamptz `json:"occurred_at"`
}

// Video projection (read model) SQL
func (q *Queries) UpsertVideoProjection(ctx context.Context, arg UpsertVideoProjectionParams) error {
	_, err := q.db.Exec(ctx, upsertVideoProjection,
		arg.VideoID,
		arg.Title,
		arg.Status,
		arg.MediaStatus,
		arg.AnalysisStatus,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Version,
		arg.OccurredAt,
	)
	return err
}
