// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: engagement_projection.sql

package catalogsql

import (
	"context"

	uuid "github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const deleteVideoUserState = `-- name: DeleteVideoUserState :exec
DELETE FROM catalog.video_user_states
WHERE user_id = $1
  AND video_id = $2
`

type DeleteVideoUserStateParams struct {
	UserID  uuid.UUID `json:"user_id"`
	VideoID uuid.UUID `json:"video_id"`
}

func (q *Queries) DeleteVideoUserState(ctx context.Context, arg DeleteVideoUserStateParams) error {
	_, err := q.db.Exec(ctx, deleteVideoUserState, arg.UserID, arg.VideoID)
	return err
}

const getVideoUserState = `-- name: GetVideoUserState :one
SELECT
    user_id,
    video_id,
    has_liked,
    has_bookmarked,
    has_watched,
    occurred_at,
    updated_at
FROM catalog.video_user_states
WHERE user_id = $1
  AND video_id = $2
`

type GetVideoUserStateParams struct {
	UserID  uuid.UUID `json:"user_id"`
	VideoID uuid.UUID `json:"video_id"`
}

func (q *Queries) GetVideoUserState(ctx context.Context, arg GetVideoUserStateParams) (CatalogVideoUserState, error) {
	row := q.db.QueryRow(ctx, getVideoUserState, arg.UserID, arg.VideoID)
	var i CatalogVideoUserState
	err := row.Scan(
		&i.UserID,
		&i.VideoID,
		&i.HasLiked,
		&i.HasBookmarked,
		&i.HasWatched,
		&i.OccurredAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertVideoUserState = `-- name: UpsertVideoUserState :exec

INSERT INTO catalog.video_user_states (
    user_id,
    video_id,
    has_liked,
    has_bookmarked,
    has_watched,
    occurred_at,
    updated_at
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    now()
)
ON CONFLICT (user_id, video_id) DO UPDATE
SET has_liked = EXCLUDED.has_liked,
    has_bookmarked = EXCLUDED.has_bookmarked,
    has_watched = EXCLUDED.has_watched,
    occurred_at = GREATEST(catalog.video_user_states.occurred_at, EXCLUDED.occurred_at),
    updated_at = now()
`

type UpsertVideoUserStateParams struct {
	UserID        uuid.UUID          `json:"user_id"`
	VideoID       uuid.UUID          `json:"video_id"`
	HasLiked      bool               `json:"has_liked"`
	HasBookmarked bool               `json:"has_bookmarked"`
	HasWatched    bool               `json:"has_watched"`
	OccurredAt    pgtype.Timestamptz `json:"occurred_at"`
}

// Video 用户态投影相关 SQL
func (q *Queries) UpsertVideoUserState(ctx context.Context, arg UpsertVideoUserStateParams) error {
	_, err := q.db.Exec(ctx, upsertVideoUserState,
		arg.UserID,
		arg.VideoID,
		arg.HasLiked,
		arg.HasBookmarked,
		arg.HasWatched,
		arg.OccurredAt,
	)
	return err
}
