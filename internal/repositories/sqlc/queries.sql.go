// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package catalogsql

import (
	"context"

	po "github.com/bionicotaku/lingo-services-catalog/internal/models/po"
	uuid "github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const findVideoByID = `-- name: FindVideoByID :one

SELECT
    video_id,
    title,
    status,
    media_status,
    analysis_status,
    created_at,
    updated_at
FROM catalog.video_projection
WHERE video_id = $1
  AND status IN ('ready', 'published')
`

type FindVideoByIDRow struct {
	VideoID        uuid.UUID          `json:"video_id"`
	Title          string             `json:"title"`
	Status         po.VideoStatus     `json:"status"`
	MediaStatus    po.StageStatus     `json:"media_status"`
	AnalysisStatus po.StageStatus     `json:"analysis_status"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
}

// Video 只读投影查询相关 SQL
// 根据 video_id 从投影表查询视频详情（仅返回 ready/published 状态的视频）
func (q *Queries) FindVideoByID(ctx context.Context, videoID uuid.UUID) (FindVideoByIDRow, error) {
	row := q.db.QueryRow(ctx, findVideoByID, videoID)
	var i FindVideoByIDRow
	err := row.Scan(
		&i.VideoID,
		&i.Title,
		&i.Status,
		&i.MediaStatus,
		&i.AnalysisStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listReadyVideosForTest = `-- name: ListReadyVideosForTest :many
SELECT
    video_id,
    title,
    status,
    media_status,
    analysis_status,
    created_at,
    updated_at
FROM catalog.video_projection
WHERE status IN ('ready', 'published')
ORDER BY created_at DESC
`

type ListReadyVideosForTestRow struct {
	VideoID        uuid.UUID          `json:"video_id"`
	Title          string             `json:"title"`
	Status         po.VideoStatus     `json:"status"`
	MediaStatus    po.StageStatus     `json:"media_status"`
	AnalysisStatus po.StageStatus     `json:"analysis_status"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) ListReadyVideosForTest(ctx context.Context) ([]ListReadyVideosForTestRow, error) {
	rows, err := q.db.Query(ctx, listReadyVideosForTest)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListReadyVideosForTestRow{}
	for rows.Next() {
		var i ListReadyVideosForTestRow
		if err := rows.Scan(
			&i.VideoID,
			&i.Title,
			&i.Status,
			&i.MediaStatus,
			&i.AnalysisStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
