// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: commands.sql

package catalogsql

import (
	"context"

	uuid "github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createVideo = `-- name: CreateVideo :one

INSERT INTO catalog.videos (
    upload_user_id,
    title,
    description,
    raw_file_reference
) VALUES (
    $1,
    $2,
    $4,
    $3
)
RETURNING
    video_id,
    upload_user_id,
    created_at,
    updated_at,
    title,
    description,
    raw_file_reference,
    status,
    version,
    media_status,
    analysis_status,
    media_job_id,
    media_emitted_at,
    analysis_job_id,
    analysis_emitted_at,
    raw_file_size,
    raw_resolution,
    raw_bitrate,
    duration_micros,
    encoded_resolution,
    encoded_bitrate,
    thumbnail_url,
    hls_master_playlist,
    difficulty,
    summary,
    tags,
    raw_subtitle_url,
    error_message
`

type CreateVideoParams struct {
	UploadUserID     uuid.UUID   `json:"upload_user_id"`
	Title            string      `json:"title"`
	RawFileReference string      `json:"raw_file_reference"`
	Description      pgtype.Text `json:"description"`
}

// Video 主表写入相关 SQL
// 创建新视频记录，video_id 由数据库自动生成
func (q *Queries) CreateVideo(ctx context.Context, arg CreateVideoParams) (CatalogVideo, error) {
	row := q.db.QueryRow(ctx, createVideo,
		arg.UploadUserID,
		arg.Title,
		arg.RawFileReference,
		arg.Description,
	)
	var i CatalogVideo
	err := row.Scan(
		&i.VideoID,
		&i.UploadUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.RawFileReference,
		&i.Status,
		&i.Version,
		&i.MediaStatus,
		&i.AnalysisStatus,
		&i.MediaJobID,
		&i.MediaEmittedAt,
		&i.AnalysisJobID,
		&i.AnalysisEmittedAt,
		&i.RawFileSize,
		&i.RawResolution,
		&i.RawBitrate,
		&i.DurationMicros,
		&i.EncodedResolution,
		&i.EncodedBitrate,
		&i.ThumbnailUrl,
		&i.HlsMasterPlaylist,
		&i.Difficulty,
		&i.Summary,
		&i.Tags,
		&i.RawSubtitleUrl,
		&i.ErrorMessage,
	)
	return i, err
}

const deleteVideo = `-- name: DeleteVideo :one
DELETE FROM catalog.videos
WHERE video_id = $1
RETURNING
    video_id,
    upload_user_id,
    created_at,
    updated_at,
    title,
    description,
    raw_file_reference,
    status,
    version,
    media_status,
    analysis_status,
    media_job_id,
    media_emitted_at,
    analysis_job_id,
    analysis_emitted_at,
    raw_file_size,
    raw_resolution,
    raw_bitrate,
    duration_micros,
    encoded_resolution,
    encoded_bitrate,
    thumbnail_url,
    hls_master_playlist,
    difficulty,
    summary,
    tags,
    raw_subtitle_url,
    error_message
`

func (q *Queries) DeleteVideo(ctx context.Context, videoID uuid.UUID) (CatalogVideo, error) {
	row := q.db.QueryRow(ctx, deleteVideo, videoID)
	var i CatalogVideo
	err := row.Scan(
		&i.VideoID,
		&i.UploadUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.RawFileReference,
		&i.Status,
		&i.Version,
		&i.MediaStatus,
		&i.AnalysisStatus,
		&i.MediaJobID,
		&i.MediaEmittedAt,
		&i.AnalysisJobID,
		&i.AnalysisEmittedAt,
		&i.RawFileSize,
		&i.RawResolution,
		&i.RawBitrate,
		&i.DurationMicros,
		&i.EncodedResolution,
		&i.EncodedBitrate,
		&i.ThumbnailUrl,
		&i.HlsMasterPlaylist,
		&i.Difficulty,
		&i.Summary,
		&i.Tags,
		&i.RawSubtitleUrl,
		&i.ErrorMessage,
	)
	return i, err
}

const getVideoByID = `-- name: GetVideoByID :one
SELECT
    video_id,
    upload_user_id,
    created_at,
    updated_at,
    title,
    description,
    raw_file_reference,
    status,
    version,
    media_status,
    analysis_status,
    media_job_id,
    media_emitted_at,
    analysis_job_id,
    analysis_emitted_at,
    raw_file_size,
    raw_resolution,
    raw_bitrate,
    duration_micros,
    encoded_resolution,
    encoded_bitrate,
    thumbnail_url,
    hls_master_playlist,
    difficulty,
    summary,
    tags,
    raw_subtitle_url,
    error_message
FROM catalog.videos
WHERE video_id = $1
`

func (q *Queries) GetVideoByID(ctx context.Context, videoID uuid.UUID) (CatalogVideo, error) {
	row := q.db.QueryRow(ctx, getVideoByID, videoID)
	var i CatalogVideo
	err := row.Scan(
		&i.VideoID,
		&i.UploadUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.RawFileReference,
		&i.Status,
		&i.Version,
		&i.MediaStatus,
		&i.AnalysisStatus,
		&i.MediaJobID,
		&i.MediaEmittedAt,
		&i.AnalysisJobID,
		&i.AnalysisEmittedAt,
		&i.RawFileSize,
		&i.RawResolution,
		&i.RawBitrate,
		&i.DurationMicros,
		&i.EncodedResolution,
		&i.EncodedBitrate,
		&i.ThumbnailUrl,
		&i.HlsMasterPlaylist,
		&i.Difficulty,
		&i.Summary,
		&i.Tags,
		&i.RawSubtitleUrl,
		&i.ErrorMessage,
	)
	return i, err
}

const updateVideo = `-- name: UpdateVideo :one
UPDATE catalog.videos
SET
    title = COALESCE($1, title),
    description = COALESCE($2, description),
    status = COALESCE($3::catalog.video_status, status),
    media_status = COALESCE($4::catalog.stage_status, media_status),
    analysis_status = COALESCE($5::catalog.stage_status, analysis_status),
    media_job_id = COALESCE($6, media_job_id),
    media_emitted_at = COALESCE($7, media_emitted_at),
    analysis_job_id = COALESCE($8, analysis_job_id),
    analysis_emitted_at = COALESCE($9, analysis_emitted_at),
    duration_micros = COALESCE($10, duration_micros),
    encoded_resolution = COALESCE($11, encoded_resolution),
    encoded_bitrate = COALESCE($12, encoded_bitrate),
    thumbnail_url = COALESCE($13, thumbnail_url),
    hls_master_playlist = COALESCE($14, hls_master_playlist),
    difficulty = COALESCE($15, difficulty),
    summary = COALESCE($16, summary),
    raw_subtitle_url = COALESCE($17, raw_subtitle_url),
    error_message = COALESCE($18, error_message),
    version = version + 1
WHERE video_id = $19
RETURNING
    video_id,
    upload_user_id,
    created_at,
    updated_at,
    title,
    description,
    raw_file_reference,
    status,
    version,
    media_status,
    analysis_status,
    media_job_id,
    media_emitted_at,
    analysis_job_id,
    analysis_emitted_at,
    raw_file_size,
    raw_resolution,
    raw_bitrate,
    duration_micros,
    encoded_resolution,
    encoded_bitrate,
    thumbnail_url,
    hls_master_playlist,
    difficulty,
    summary,
    tags,
    raw_subtitle_url,
    error_message
`

type UpdateVideoParams struct {
	Title             pgtype.Text            `json:"title"`
	Description       pgtype.Text            `json:"description"`
	Status            NullCatalogVideoStatus `json:"status"`
	MediaStatus       NullCatalogStageStatus `json:"media_status"`
	AnalysisStatus    NullCatalogStageStatus `json:"analysis_status"`
	MediaJobID        pgtype.Text            `json:"media_job_id"`
	MediaEmittedAt    pgtype.Timestamptz     `json:"media_emitted_at"`
	AnalysisJobID     pgtype.Text            `json:"analysis_job_id"`
	AnalysisEmittedAt pgtype.Timestamptz     `json:"analysis_emitted_at"`
	DurationMicros    pgtype.Int8            `json:"duration_micros"`
	EncodedResolution pgtype.Text            `json:"encoded_resolution"`
	EncodedBitrate    pgtype.Int4            `json:"encoded_bitrate"`
	ThumbnailUrl      pgtype.Text            `json:"thumbnail_url"`
	HlsMasterPlaylist pgtype.Text            `json:"hls_master_playlist"`
	Difficulty        pgtype.Text            `json:"difficulty"`
	Summary           pgtype.Text            `json:"summary"`
	RawSubtitleUrl    pgtype.Text            `json:"raw_subtitle_url"`
	ErrorMessage      pgtype.Text            `json:"error_message"`
	VideoID           uuid.UUID              `json:"video_id"`
}

func (q *Queries) UpdateVideo(ctx context.Context, arg UpdateVideoParams) (CatalogVideo, error) {
	row := q.db.QueryRow(ctx, updateVideo,
		arg.Title,
		arg.Description,
		arg.Status,
		arg.MediaStatus,
		arg.AnalysisStatus,
		arg.MediaJobID,
		arg.MediaEmittedAt,
		arg.AnalysisJobID,
		arg.AnalysisEmittedAt,
		arg.DurationMicros,
		arg.EncodedResolution,
		arg.EncodedBitrate,
		arg.ThumbnailUrl,
		arg.HlsMasterPlaylist,
		arg.Difficulty,
		arg.Summary,
		arg.RawSubtitleUrl,
		arg.ErrorMessage,
		arg.VideoID,
	)
	var i CatalogVideo
	err := row.Scan(
		&i.VideoID,
		&i.UploadUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.RawFileReference,
		&i.Status,
		&i.Version,
		&i.MediaStatus,
		&i.AnalysisStatus,
		&i.MediaJobID,
		&i.MediaEmittedAt,
		&i.AnalysisJobID,
		&i.AnalysisEmittedAt,
		&i.RawFileSize,
		&i.RawResolution,
		&i.RawBitrate,
		&i.DurationMicros,
		&i.EncodedResolution,
		&i.EncodedBitrate,
		&i.ThumbnailUrl,
		&i.HlsMasterPlaylist,
		&i.Difficulty,
		&i.Summary,
		&i.Tags,
		&i.RawSubtitleUrl,
		&i.ErrorMessage,
	)
	return i, err
}
