// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"fmt"
	"github.com/bionicotaku/lingo-services-catalog/internal/infrastructure/configloader"
	"github.com/bionicotaku/lingo-services-catalog/internal/repositories"
	"github.com/bionicotaku/lingo-services-catalog/internal/services"
	"github.com/bionicotaku/lingo-services-catalog/internal/tasks/uploads"
	"github.com/bionicotaku/lingo-utils/gclog"
	"github.com/bionicotaku/lingo-utils/pgxpoolx"
	"github.com/bionicotaku/lingo-utils/txmanager"
	"github.com/go-kratos/kratos/v2/log"
)

// Injectors from wire.go:

func wireUploadsTask(contextContext context.Context, params configloader.Params) (*uploadsTaskApp, func(), error) {
	runtimeConfig, err := configloader.LoadRuntimeConfig(params)
	if err != nil {
		return nil, nil, err
	}
	serviceInfo := configloader.ProvideServiceInfo(runtimeConfig)
	config := configloader.ProvideLoggerConfig(serviceInfo)
	component, cleanup, err := gclog.NewComponent(config)
	if err != nil {
		return nil, nil, err
	}
	logger := gclog.ProvideLogger(component)
	databaseConfig := configloader.ProvideDatabaseConfig(runtimeConfig)
	pgxpoolxConfig := configloader.ProvidePgxConfig(databaseConfig)
	pgxpoolxComponent, cleanup2, err := pgxpoolx.ProvideComponent(contextContext, pgxpoolxConfig, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	pool := pgxpoolx.ProvidePool(pgxpoolxComponent)
	uploadRepository := repositories.NewUploadRepository(pool, logger)
	messagingConfig := configloader.ProvideMessagingConfig(runtimeConfig)
	configConfig := configloader.ProvideOutboxConfig(messagingConfig)
	inboxRepository := repositories.NewInboxRepository(pool, logger, configConfig)
	videoRepository := repositories.NewVideoRepository(pool, logger)
	outboxRepository := repositories.NewOutboxRepository(pool, logger, configConfig)
	txmanagerConfig := configloader.ProvideTxConfig(runtimeConfig)
	txmanagerComponent, cleanup3, err := txmanager.NewComponent(txmanagerConfig, pool, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	manager := txmanager.ProvideManager(txmanagerComponent)
	lifecycleWriter := services.NewLifecycleWriter(videoRepository, outboxRepository, manager, logger)
	uploadPubSubConfig := configloader.ProvideUploadConfig(messagingConfig)
	dependencies := configloader.ProvidePubSubDependencies(logger)
	uploadSubscriber, cleanup4, err := configloader.ProvideUploadSubscriber(contextContext, uploadPubSubConfig, dependencies)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	runner := uploads.ProvideRunner(uploadRepository, inboxRepository, lifecycleWriter, manager, uploadSubscriber, configConfig, logger)
	mainUploadsTaskApp, err := newUploadsTaskApp(logger, runner)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	return mainUploadsTaskApp, func() {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

func newUploadsTaskApp(logger log.Logger, runner *uploads.Runner) (*uploadsTaskApp, error) {
	if runner == nil {
		return &uploadsTaskApp{Logger: logger}, nil
	}
	if logger == nil {
		return nil, fmt.Errorf("logger not initialized")
	}
	return &uploadsTaskApp{
		Runner: runner,
		Logger: logger,
	}, nil
}
